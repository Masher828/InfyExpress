{"ast":null,"code":"import { ADD_USER_FAILED, ADD_USER_RECEIVED, ADD_USER_REQUEST, FETCH_SERVICE_FAILED, FETCH_SERVICE_RECEIVED, FETCH_SERVICE_REQUEST, LOGIN_USER_FAILED, LOGIN_USER_RECEIVED, LOGIN_USER_REQUEST, LOGOUT_USER_RECEIVED, SUBMIT_QUOTE_FAILED, SUBMIT_QUOTE_RECIEVED, SUBMIT_QUOTE_REQUEST, LOGOUT_USER_REQUEST, BOOK_SERVICE_REQUEST, BOOK_SERVICE_FAILED, BOOK_SERVICE_RECEIVED } from \"./ActionType\";\nimport Axios from 'axios';\nexport const loginUserRequest = () => {\n  return {\n    type: LOGIN_USER_REQUEST\n  };\n};\nexport const loginUserReceived = details => {\n  return {\n    type: LOGIN_USER_RECEIVED,\n    details\n  };\n};\nexport const loginUserFailed = err => {\n  return {\n    type: LOGIN_USER_FAILED,\n    err\n  };\n};\nexport const loginUser = creds => dispatch => {\n  dispatch(loginUserRequest());\n  fetch('http://localhost:3000/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': \"application/json\"\n    },\n    body: JSON.stringify(creds)\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var err = new Error(response.status);\n      err.response = response;\n      throw err;\n    }\n  }).then(response => response.json()).then(response => {\n    if (response.success) {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('_id', response.user_id);\n      dispatch(loginUserReceived({\n        token: response.token\n      }));\n    } else {\n      dispatch(loginUserFailed({\n        err: response.info.message\n      }));\n    }\n  });\n};\nexport const addUserRequest = () => {\n  return {\n    type: ADD_USER_REQUEST\n  };\n};\nexport const addUserReceived = details => {\n  return {\n    type: ADD_USER_RECEIVED,\n    details\n  };\n};\nexport const addUserFailed = err => {\n  return {\n    type: ADD_USER_FAILED,\n    err\n  };\n};\nexport const addUser = data => dispatch => {\n  dispatch(addUserRequest());\n  Axios.post(\"http://localhost:3000/users/signup\", data).then(response => {\n    if (response.data.success) {\n      dispatch(addUserReceived());\n    } else {\n      dispatch(addUserFailed({\n        err: response.err\n      }));\n    }\n  }).catch(err => dispatch(addUserFailed(err.message)));\n};\nexport const logoutUserRequest = () => {\n  return {\n    type: LOGOUT_USER_REQUEST\n  };\n};\nexport const logoutUserReceived = () => {\n  return {\n    type: LOGOUT_USER_RECEIVED\n  };\n};\nexport const logoutUser = () => dispatch => {\n  console.log(\"logging out user\");\n  dispatch(logoutUserRequest());\n  localStorage.removeItem('token');\n  localStorage.removeItem('_id');\n  fetch('http://localhost:3000/users/logout', {\n    method: 'GET',\n    headers: {\n      'Content-Type': \"application/json\"\n    }\n  }, err => {\n    throw err;\n  }).then(response => response.json()).then(response => {\n    dispatch(logoutUserReceived());\n  });\n};\nexport const fetchServiceRequest = () => {\n  return {\n    type: FETCH_SERVICE_REQUEST\n  };\n};\nexport const fetchServiceReceived = services => {\n  return {\n    type: FETCH_SERVICE_RECEIVED,\n    services: services\n  };\n};\nexport const fetchServiceFailed = err => {\n  return {\n    type: FETCH_SERVICE_FAILED,\n    err: err\n  };\n};\nexport const fetchService = () => dispatch => {\n  dispatch(fetchServiceRequest());\n  Axios.get('http://localhost:3000/services').then(response => {\n    if (response.data.success) {\n      dispatch(fetchServiceReceived(response.data.services));\n    } else {\n      dispatch(fetchServiceFailed({\n        err: \"err\"\n      }));\n    }\n  }).catch(err => dispatch(fetchServiceFailed(err)));\n};\nexport const submitQuoteRequest = () => {\n  return {\n    type: SUBMIT_QUOTE_REQUEST\n  };\n};\nexport const submitQuoteReceived = () => {\n  return {\n    type: SUBMIT_QUOTE_RECIEVED\n  };\n};\nexport const submitQuoteFailed = err => {\n  return {\n    type: SUBMIT_QUOTE_FAILED,\n    err: err\n  };\n};\nexport const submitQuote = data => dispatch => {\n  dispatch(submitQuoteRequest());\n  console.log(data);\n  Axios.post(\"http://localhost:3000/randomstringforadmin/addQuote\", data).then(response => {\n    console.log(response);\n\n    if (response.data.success) {\n      dispatch(submitQuoteReceived());\n    } else {\n      dispatch(submitQuoteFailed(response.data.err));\n    }\n  }, err => {\n    console.log(err);\n    dispatch(submitQuoteFailed(err));\n  }).catch(err => {\n    console.log(err);\n    dispatch(submitQuoteFailed(err));\n  });\n};\nexport const bookServiceRequest = () => {\n  return {\n    type: BOOK_SERVICE_REQUEST\n  };\n};\nexport const bookServiceFailed = () => {\n  return {\n    type: BOOK_SERVICE_FAILED\n  };\n};\nexport const bookServiceReceived = () => {\n  return {\n    type: BOOK_SERVICE_RECEIVED\n  };\n};\nexport const bookService = data => dispatch => {\n  console.log(data);\n  dispatch(bookServiceRequest());\n  fetch('http://localhost:3000/booking', {\n    method: 'POST',\n    headers: {\n      'Content-Type': \"application/json\",\n      'Authorization': 'bearer' + localStorage.getItem('token')\n    },\n    body: JSON.stringify(data)\n  }).then(response => response.json()).then(response => {\n    console.log(response);\n\n    if (response.success) {\n      dispatch(bookServiceReceived());\n    } else {\n      console.log(err);\n      dispatch(bookServiceFailed(response.err));\n    }\n  }, err => {\n    console.log(err);\n    dispatch(bookServiceFailed(response.data.err));\n  });\n};","map":{"version":3,"sources":["G:/Project/InfyExpress (MERN)/infyexpress_frontend/src/redux/ActionCreators.js"],"names":["ADD_USER_FAILED","ADD_USER_RECEIVED","ADD_USER_REQUEST","FETCH_SERVICE_FAILED","FETCH_SERVICE_RECEIVED","FETCH_SERVICE_REQUEST","LOGIN_USER_FAILED","LOGIN_USER_RECEIVED","LOGIN_USER_REQUEST","LOGOUT_USER_RECEIVED","SUBMIT_QUOTE_FAILED","SUBMIT_QUOTE_RECIEVED","SUBMIT_QUOTE_REQUEST","LOGOUT_USER_REQUEST","BOOK_SERVICE_REQUEST","BOOK_SERVICE_FAILED","BOOK_SERVICE_RECEIVED","Axios","loginUserRequest","type","loginUserReceived","details","loginUserFailed","err","loginUser","creds","dispatch","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","status","json","success","localStorage","setItem","token","user_id","info","message","addUserRequest","addUserReceived","addUserFailed","addUser","data","post","catch","logoutUserRequest","logoutUserReceived","logoutUser","console","log","removeItem","fetchServiceRequest","fetchServiceReceived","services","fetchServiceFailed","fetchService","get","submitQuoteRequest","submitQuoteReceived","submitQuoteFailed","submitQuote","bookServiceRequest","bookServiceFailed","bookServiceReceived","bookService","getItem"],"mappings":"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","sourcesContent":["import { ADD_USER_FAILED, ADD_USER_RECEIVED, ADD_USER_REQUEST, FETCH_SERVICE_FAILED, FETCH_SERVICE_RECEIVED, FETCH_SERVICE_REQUEST, LOGIN_USER_FAILED, LOGIN_USER_RECEIVED, LOGIN_USER_REQUEST, LOGOUT_USER_RECEIVED, SUBMIT_QUOTE_FAILED, SUBMIT_QUOTE_RECIEVED, SUBMIT_QUOTE_REQUEST, LOGOUT_USER_REQUEST, BOOK_SERVICE_REQUEST, BOOK_SERVICE_FAILED, BOOK_SERVICE_RECEIVED } from \"./ActionType\"\r\nimport Axios from 'axios';\r\n\r\nexport const loginUserRequest = ()=>{\r\n    return{\r\n        type : LOGIN_USER_REQUEST\r\n    }\r\n};\r\n\r\nexport const loginUserReceived = (details)=>{\r\n    return {\r\n        type : LOGIN_USER_RECEIVED,\r\n        details\r\n    }\r\n};\r\n\r\nexport const loginUserFailed = (err)=>{\r\n    return{\r\n        type : LOGIN_USER_FAILED,\r\n        err\r\n    }\r\n};\r\n\r\nexport const loginUser = (creds)=>(dispatch)=>{\r\n    dispatch(loginUserRequest());\r\n    fetch('http://localhost:3000/users/login',{\r\n        method : 'POST',\r\n        headers : {\r\n            'Content-Type' : \"application/json\"\r\n        },\r\n        body : JSON.stringify(creds)\r\n    })\r\n    .then((response)=>{\r\n        if (response.ok){\r\n            return response;\r\n        }\r\n        else{\r\n            var err= new Error(response.status);\r\n            err.response = response;\r\n            throw err;\r\n        }\r\n    })\r\n    .then((response)=>response.json())\r\n    .then((response)=>{\r\n        if(response.success){\r\n            localStorage.setItem('token',response.token);\r\n            localStorage.setItem('_id',response.user_id);\r\n            dispatch(loginUserReceived({token:response.token}));\r\n        }\r\n        else{\r\n            dispatch(loginUserFailed({err:response.info.message}))\r\n        }\r\n    })\r\n}\r\n\r\nexport const addUserRequest = ()=>{\r\n    return{\r\n        type : ADD_USER_REQUEST\r\n    }\r\n};\r\n\r\nexport const addUserReceived = (details)=>{\r\n    return {\r\n        type : ADD_USER_RECEIVED,\r\n        details\r\n    }\r\n};\r\n\r\nexport const addUserFailed = (err)=>{\r\n    return{\r\n        type : ADD_USER_FAILED,\r\n        err\r\n    }\r\n};\r\n\r\nexport const addUser = (data)=>(dispatch)=>{\r\n    dispatch(addUserRequest());\r\n    Axios.post(\"http://localhost:3000/users/signup\",data)\r\n    .then((response)=>{\r\n        if(response.data.success){\r\n            dispatch(addUserReceived());\r\n        }\r\n        else{\r\n            dispatch(addUserFailed({err:response.err}))\r\n        }\r\n    })\r\n    .catch((err)=>dispatch(addUserFailed(err.message)));\r\n}\r\n\r\nexport const logoutUserRequest = ()=>{\r\n    return{\r\n        type : LOGOUT_USER_REQUEST\r\n    }\r\n};\r\n\r\nexport const logoutUserReceived = ()=>{\r\n    return{\r\n        type : LOGOUT_USER_RECEIVED\r\n    }\r\n};\r\n\r\nexport const logoutUser = ()=>(dispatch)=>{\r\n    console.log(\"logging out user\");\r\n    dispatch(logoutUserRequest());\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('_id');\r\n    fetch('http://localhost:3000/users/logout',{\r\n        method:'GET',\r\n        headers:{\r\n            'Content-Type':\"application/json\"\r\n        }\r\n    },(err)=>{throw err})\r\n    .then((response)=>response.json())\r\n    .then(response=>{\r\n        dispatch(logoutUserReceived());\r\n    })\r\n};\r\n\r\nexport const fetchServiceRequest = () =>{\r\n    return{\r\n        type : FETCH_SERVICE_REQUEST\r\n    }\r\n}\r\n\r\nexport const fetchServiceReceived = (services) =>{\r\n    return{\r\n        type : FETCH_SERVICE_RECEIVED,\r\n        services: services\r\n    }\r\n}\r\n\r\nexport const fetchServiceFailed = (err) =>{\r\n    return{\r\n        type : FETCH_SERVICE_FAILED,\r\n        err : err\r\n    }\r\n}\r\n\r\nexport const fetchService = ()=> (dispatch) =>{\r\n    dispatch(fetchServiceRequest());\r\n    Axios.get('http://localhost:3000/services')\r\n    .then(response=>{\r\n        if (response.data.success){\r\n            dispatch(fetchServiceReceived(response.data.services));\r\n        }\r\n        else{\r\n            \r\n            dispatch(fetchServiceFailed({err:\"err\"}))\r\n        }\r\n    })\r\n    .catch((err)=>dispatch(fetchServiceFailed(err)));\r\n}\r\n\r\nexport const submitQuoteRequest = ()=>{\r\n    return{\r\n        type : SUBMIT_QUOTE_REQUEST\r\n    }\r\n}\r\n\r\nexport const submitQuoteReceived = ()=>{\r\n    return{\r\n        type : SUBMIT_QUOTE_RECIEVED\r\n    }\r\n}\r\n\r\nexport const submitQuoteFailed = (err)=>{\r\n    return{\r\n        type : SUBMIT_QUOTE_FAILED,\r\n        err: err\r\n    }\r\n}\r\n\r\nexport const submitQuote = (data)=>(dispatch)=>{\r\n    dispatch(submitQuoteRequest());\r\n    console.log(data)\r\n    Axios.post(\"http://localhost:3000/randomstringforadmin/addQuote\",data)\r\n    .then(response=>{\r\n        console.log(response);\r\n        if (response.data.success){\r\n            dispatch(submitQuoteReceived());\r\n        }\r\n        else{\r\n            dispatch(submitQuoteFailed(response.data.err));\r\n        }\r\n    }, (err)=>{\r\n        console.log(err);\r\n        dispatch(submitQuoteFailed(err));\r\n    })\r\n    .catch((err)=>{\r\n        console.log(err);\r\n        dispatch(submitQuoteFailed(err));\r\n    })\r\n    \r\n}\r\n\r\n\r\nexport const bookServiceRequest = ()=>{\r\n    return {\r\n        type: BOOK_SERVICE_REQUEST\r\n    }\r\n};\r\n\r\nexport const bookServiceFailed = ()=>{\r\n    return{\r\n        type : BOOK_SERVICE_FAILED\r\n    }\r\n};\r\n\r\nexport const bookServiceReceived = ()=>{\r\n    return {\r\n        type : BOOK_SERVICE_RECEIVED\r\n    }\r\n};\r\n\r\nexport const bookService = (data)=>(dispatch)=>{\r\n    console.log(data)\r\n    dispatch(bookServiceRequest());\r\n    fetch('http://localhost:3000/booking',{\r\n        method:'POST',\r\n        headers:{\r\n            'Content-Type':\"application/json\",\r\n            'Authorization':'bearer'+localStorage.getItem('token')\r\n        },\r\n        body:JSON.stringify(data)\r\n    })\r\n    .then((response)=>response.json())\r\n    .then((response)=>{\r\n        console.log(response);\r\n        if (response.success){\r\n            dispatch(bookServiceReceived());\r\n        }\r\n        else{\r\n            console.log(err);\r\n            dispatch(bookServiceFailed(response.err));\r\n        }\r\n    }, err=>{\r\n        console.log(err);\r\n        dispatch(bookServiceFailed(response.data.err));\r\n    })\r\n};"]},"metadata":{},"sourceType":"module"}